//  To check if the provided email is valid.
bool isEmailValid(String email) {
  // Creating a regular expression to match valid email addresses.
  final emailRegex = RegExp(r'^[a-zA-Z0-9.!#$%&\'*+~/-]+@[a-zA-Z0-9-]+\.[a-zA-Z]+$');

  // Returning true if the email matches the regular expression, false otherwise.
  return emailRegex.hasMatch(email);
}

// This function allows the user to log in.
void login() async {
  // To Get the email and password from the text fields.
  final email = _emailController.text;
  final password = _passwordController.text;

  // To Check if the email and password are valid.
  if (!isEmailValid(email) || !isPasswordValid(password)) {
    // Show an error message to the user.
    showUserMessage('Invalid email or password.');
    return;
  }

  // Try to log in the user.
  try {
    // Sign in the user with the provided email and password.
    await _auth.signInWithEmailAndPassword(email: email, password: password);

    // Showing a success message to the user and navigate to the home page.
    showUserMessage('Welcome back! You have successfully logged in.');
    Navigator.pushNamed(context, '/home');
  } catch (e) {
    // Showing an error message to the user.
    showUserMessage(e.message);
  }
}

// This function allows the user to sign up.
void signUp() async {
  // Get the email, password, and name from the text fields.
  final email = _emailController.text;
  final password = _passwordController.text;
  final name = _nameController.text;

  // Checking if the email, password, and name are valid.
  if (!isEmailValid(email) || !isPasswordValid(password) || name.isEmpty) {
    // Show an error message to the user.
    showUserMessage('Invalid email, password, or name.');
    return;
  }

  // Try to sign up the user.
  try {
    // Creating a new user with the provided email and password.
    final userCredential = await _auth.createUserWithEmailAndPassword(email: email, password: password);

    // Save the user's name and email address to Firestore.
    await _firestore.collection('users').doc(userCredential.user.uid).set({
      'name': name,
      'email': email,
    });

    // Showing a success message to the user and navigate to the home page.
    showUserMessage('Congratulations! You have successfully signed up.');
    Navigator.pushNamed(context, '/home');
  } catch (e) {
    // Show an error message to the user.
    showUserMessage(e.message);
  }
}
